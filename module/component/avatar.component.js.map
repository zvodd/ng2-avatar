{"version":3,"file":"avatar.component.js","sourceRoot":"","sources":["../../../module/component/avatar.component.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable component-selector-name */\n\nimport {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {Md5} from '../Md5';\n\n/**\n * The main component for the avatar\n *\n * @example\n * <avatar [email]=\"email\" [displayType]=\"'circle'\"></avatar>\n *\n */\n\nexport class AvatarComponent implements OnInit, OnChanges {\n\n  /**\n   * The user email adresse for Gravatar.com\n   */\n   email: string;\n\n  /**\n   * The full name of the user for the avatar letter\n   * @type {string}\n   */\n   name: string;\n\n  /**\n   * The display size\n   * @type {number}\n   */\n   size = 100;\n\n  /**\n   * The display size\n   * @type {boolean}\n   */\n   useSize = true;\n\n  /**\n   * Value to set a fixed color via HEX code\n   * @type {string}\n   */\n   background = this.getRandomColor();\n\n  /**\n   * Value to set the display type\n   * @type {string} - none|circle|rounded\n   */\n   displayType = 'none';\n\n  /**\n   * Value to set a default letter\n   * @type {string}\n   */\n   letter = '?';\n\n  /**\n   * Value to set a default protocol\n   * @type {string|null} - http|https\n   */\n   defaultProtocol: string = null;\n\n  gravatarUrl: string;\n  displayImage = true;\n  fontSize = 49;\n  fontColor = '#FFFFFF';\n  props: any = null;\n\n  constructor() {\n  }\n\n  /**\n   * Randomly generates a HEX color\n   * @return {string}\n   */\n  getRandomColor(): string {\n    const letters = '0123456789ABCDEF'.split('');\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  /**\n   * Set the avatar letter based on full name or email\n   */\n  getLetter(): void {\n    if (this.name && this.name.length) {\n      const nameInitials = this.name.match(/\\b(\\w)/g);\n      const nameLetters = nameInitials.slice(0, 3).join('');\n      this.letter = nameLetters.toUpperCase();\n    } else if (this.email && this.email.length) {\n      const emailInitials = this.email.split('@')[0].match(/\\b(\\w)/g);\n      const emailLetters = emailInitials.slice(0, 3).join('');\n      this.letter = emailLetters.toUpperCase();\n    }\n  }\n\n  /**\n   * Create a Gravatar API url\n   */\n  getAvatar(): void {\n    // tslint:disable-next-line\n    if (this.email && /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(this.email)) {\n      const hash = Md5.init(this.email);\n\n      const protocol = this.defaultProtocol ? this.defaultProtocol + ':' : '';\n      this.gravatarUrl = `${protocol}//www.gravatar.com/avatar/${hash}?s=${this.size}&d=404`;\n      this.displayImage = true;\n    } else {\n      this.displayImage = false;\n    }\n  }\n\n  setCssProps() {\n    this.fontSize = (39 * this.size) / 100;\n    this.props = {\n      size: this.useSize ? `${this.size}px` : ``,\n      lineheight: this.useSize ? `${this.size}px` : ``,\n      background: this.background,\n      fontSize: this.useSize ? `${this.fontSize}px` : ``\n    };\n\n    switch (this.displayType) {\n      case 'rounded':\n        this.props['borderradius'] = '5%';\n        break;\n      case 'circle':\n        this.props['borderradius'] = '50%';\n        break;\n      default:\n        this.props['borderradius'] = '0';\n    }\n  }\n\n  /**\n   * Set avatar size, background and display type\n   */\n  ngOnInit() {\n    this.setCssProps();\n\n    this.getLetter();\n    this.getAvatar();\n  }\n\n  /**\n   * Updates avatar image and letter on email updates\n   */\n  ngOnChanges() {\n    this.getAvatar();\n    this.getLetter();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'avatar',\n  template: `\n    <div class=\"avatar\"\n         *ngIf=\"props\"\n         [style.background-color]='props.background'\n         [style.width]=\"props.size\"\n         [style.line-height]=\"props.lineheight\"\n         [style.height]=\"props.size\"\n         [style.font-size]=\"props.fontSize\"\n         [style.border-radius]=\"props.borderradius\">\n          <img *ngIf=\"displayImage\"\n               [src]=\"gravatarUrl\"\n               (error)=\"displayImage = false;\"\n               alt=\"{{name}} | {{letter}}\"/>\n          <span *ngIf=\"!displayImage\" [style.color]='fontColor'>{{letter}}</span>\n    </div>\n  `,\n  styles: [`\n    .avatar{text-align:center;overflow:hidden}.avatar img{vertical-align:top}\n  `]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'email': [{ type: Input, args: ['email', ] },],\n'name': [{ type: Input, args: ['name', ] },],\n'size': [{ type: Input, args: ['size', ] },],\n'useSize': [{ type: Input, args: ['useSize', ] },],\n'background': [{ type: Input, args: ['background', ] },],\n'displayType': [{ type: Input, args: ['displayType', ] },],\n'letter': [{ type: Input, args: ['letter', ] },],\n'defaultProtocol': [{ type: Input, args: ['defaultProtocol', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}